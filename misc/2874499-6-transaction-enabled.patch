diff --git a/core/modules/block_content/src/Tests/BlockContentCreationTest.php b/core/modules/block_content/src/Tests/BlockContentCreationTest.php
index ac9e824..153cdaa 100644
--- a/core/modules/block_content/src/Tests/BlockContentCreationTest.php
+++ b/core/modules/block_content/src/Tests/BlockContentCreationTest.php
@@ -213,10 +213,6 @@ public function testFailedBlockCreation() {
         ->execute()
         ->fetchField();
       $this->assertTrue($id, 'Transactions not supported, and block found in database.');
-
-      // Check that the failed rollback was logged.
-      $records = db_query("SELECT wid FROM {watchdog} WHERE message LIKE 'Explicit rollback failed%'")->fetchAll();
-      $this->assertTrue(count($records) > 0, 'Transactions not supported, and rollback error logged to watchdog.');
     }
   }
 
diff --git a/core/modules/node/tests/src/Functional/NodeCreationTest.php b/core/modules/node/tests/src/Functional/NodeCreationTest.php
index 4d24901..f485b3d 100644
--- a/core/modules/node/tests/src/Functional/NodeCreationTest.php
+++ b/core/modules/node/tests/src/Functional/NodeCreationTest.php
@@ -112,10 +112,6 @@ public function testFailedPageCreation() {
       // Check that the node exists in the database.
       $node = $this->drupalGetNodeByTitle($edit['title']);
       $this->assertTrue($node, 'Transactions not supported, and node found in database.');
-
-      // Check that the failed rollback was logged.
-      $records = static::getWatchdogIdsForFailedExplicitRollback();
-      $this->assertTrue(count($records) > 0, 'Transactions not supported, and rollback error logged to watchdog.');
     }
 
     // Check that the rollback error was logged.
@@ -220,15 +216,4 @@ protected static function getWatchdogIdsForTestExceptionRollback() {
     return $matches;
   }
 
-  /**
-   * Gets the log records with the explicit rollback failed exception message.
-   *
-   * @return \Drupal\Core\Database\StatementInterface
-   *   A prepared statement object (already executed), which contains the log
-   *   records with the explicit rollback failed exception message.
-   */
-  protected static function getWatchdogIdsForFailedExplicitRollback() {
-    return db_query("SELECT wid FROM {watchdog} WHERE message LIKE 'Explicit rollback failed%'")->fetchAll();
-  }
-
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php b/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php
index a07045d..39927ad 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php
@@ -64,13 +64,17 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
       ])
       ->execute();
 
-    $this->assertTrue($connection->inTransaction(), 'In transaction before calling nested transaction.');
+    if ($connection->supportsTransactions()) {
+      $this->assertTrue($connection->inTransaction(), 'In transaction before calling nested transaction.');
+    }
 
     // We're already in a transaction, but we call ->transactionInnerLayer
     // to nest another transaction inside the current one.
     $this->transactionInnerLayer($suffix, $rollback, $ddl_statement);
 
-    $this->assertTrue($connection->inTransaction(), 'In transaction after calling nested transaction.');
+    if ($connection->supportsTransactions()) {
+      $this->assertTrue($connection->inTransaction(), 'In transaction after calling nested transaction.');
+    }
 
     if ($rollback) {
       // Roll back the transaction, if requested.
@@ -104,7 +108,9 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
     $txn = db_transaction();
 
     $depth2 = $connection->transactionDepth();
-    $this->assertTrue($depth < $depth2, 'Transaction depth is has increased with new transaction.');
+    if ($connection->supportsTransactions()) {
+      $this->assertTrue($depth < $depth2, 'Transaction depth is has increased with new transaction.');
+    }
 
     // Insert a single row into the testing table.
     db_insert('test')
@@ -114,7 +120,9 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
       ])
       ->execute();
 
-    $this->assertTrue($connection->inTransaction(), 'In transaction inside nested transaction.');
+    if ($connection->supportsTransactions()) {
+      $this->assertTrue($connection->inTransaction(), 'In transaction inside nested transaction.');
+    }
 
     if ($ddl_statement) {
       $table = [
@@ -129,14 +137,18 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
       ];
       db_create_table('database_test_1', $table);
 
-      $this->assertTrue($connection->inTransaction(), 'In transaction inside nested transaction.');
+      if ($connection->supportsTransactions()) {
+        $this->assertTrue($connection->inTransaction(), 'In transaction inside nested transaction.');
+      }
     }
 
     if ($rollback) {
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertTrue(($connection->transactionDepth() == $depth), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      if ($connection->supportsTransactions()) {
+        $this->assertTrue(($connection->transactionDepth() == $depth), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      }
     }
   }
 
@@ -257,7 +269,12 @@ public function testTransactionWithDdlStatement() {
     $transaction3->rollBack();
     unset($transaction3);
     unset($transaction);
-    $this->assertRowAbsent('row');
+    if (Database::getConnection()->supportsTransactions()) {
+      $this->assertRowAbsent('row');
+    }
+    else {
+      $this->assertRowPresent('row');
+    }
 
     // The behavior of a rollback depends on the type of database server.
     if (Database::getConnection()->supportsTransactionalDDL()) {

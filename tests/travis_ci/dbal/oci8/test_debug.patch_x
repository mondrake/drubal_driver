diff --git a/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php b/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php
index e5d3711..134e1a3 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php
@@ -128,7 +128,10 @@ public function testFilterCombineWord() {
       ],
     ]);
 
+\Drupal::database()->getDbalExtension()->setDebugging(TRUE);
     $this->executeView($view);
+error_log(var_export($view->result, TRUE));
+\Drupal::database()->getDbalExtension()->setDebugging(FALSE);
     $resultset = [
       [
         'name' => 'John',
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php b/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
index e239098..99621c1 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
@@ -136,8 +136,16 @@ public function testSchema() {
 
     $this->assertTrue($this->tryInsert(), 'Insert with a serial succeeded.');
     $max1 = db_query('SELECT MAX(test_serial) FROM {test_table}')->fetchField();
+error_log('max1: ' . $max1);
     $this->assertTrue($this->tryInsert(), 'Insert with a serial succeeded.');
+error_log('a:');
+$xx = db_select('test_table', 'c')
+    ->fields('c')
+    ->execute()
+    ->fetchAll();
+error_log(var_export($xx, TRUE));
     $max2 = db_query('SELECT MAX(test_serial) FROM {test_table}')->fetchField();
+error_log('max2: ' . $max1);
     $this->assertTrue($max2 > $max1, 'The serial is monotone.');
 
     $count = db_query('SELECT COUNT(*) FROM {test_table}')->fetchField();
@@ -439,6 +447,7 @@ public function checkSchemaComment($description, $table, $column = NULL) {
    * Tests creating unsigned columns and data integrity thereof.
    */
   public function testUnsignedColumns() {
+\Drupal::database()->getDbalExtension()->setDebugging(TRUE);
     // First create the table with just a serial column.
     $table_name = 'unsigned_table';
     $table_spec = [
@@ -461,6 +470,8 @@ public function testUnsignedColumns() {
 
     // Finally, check each column and try to insert invalid values into them.
     foreach ($table_spec['fields'] as $column_name => $column_spec) {
+error_log('column-> ' . $column_name);
+error_log(var_export($column_spec, TRUE));
       $this->assertTrue(db_field_exists($table_name, $column_name), format_string('Unsigned @type column was created.', ['@type' => $column_spec['type']]));
       $this->assertFalse($this->tryUnsignedInsert($table_name, $column_name), format_string('Unsigned @type column rejected a negative value.', ['@type' => $column_spec['type']]));
     }
@@ -482,9 +493,21 @@ public function tryUnsignedInsert($table_name, $column_name) {
       db_insert($table_name)
         ->fields([$column_name => -1])
         ->execute();
+$xx = db_select($table_name, 'c')
+    ->fields('c')
+    ->execute()
+    ->fetchAll();
+error_log(var_export($xx, TRUE));
+
       return TRUE;
     }
     catch (\Exception $e) {
+error_log('*** exc');
+$xx = db_select($table_name, 'c')
+    ->fields('c')
+    ->execute()
+    ->fetchAll();
+error_log(var_export($xx, TRUE));
       return FALSE;
     }
   }

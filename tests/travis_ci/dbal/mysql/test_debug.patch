diff --git a/core/lib/Drupal/Core/Database/Log.php b/core/lib/Drupal/Core/Database/Log.php
index c0768fbb..efe41cf3 100644
--- a/core/lib/Drupal/Core/Database/Log.php
+++ b/core/lib/Drupal/Core/Database/Log.php
@@ -145,13 +145,23 @@ public function log(StatementInterface $statement, $args, $time) {
    * @return
    *   This method returns a stack trace entry similar to that generated by
    *   debug_backtrace(). However, it flattens the trace entry and the trace
-   *   entry before it so that we get the function and args of the function
-   *   that called into the database system, not the function and args of the
+   *   entry before it so that we get the function and args of the function that
+   *   called into the database system, not the function and args of the
    *   database call itself.
    */
   public function findCaller() {
     $stack = $this->getDebugBacktrace();
-
+$xxx = [];
+foreach ($stack as $x) {
+  if (isset($x['args'])) {
+    $x['args'] = ['test'];
+  }
+  if (isset($x['object'])) {
+    $x['object'] = 'test';
+  }
+  $xxx[] = $x;
+}
+dump($xxx);
     // Starting from the very first entry processed during the request, find
     // the first function call that can be identified as a call to a
     // method/function in the database layer.
@@ -173,7 +183,7 @@ public function findCaller() {
           'file' => $stack[$i]['file'],
           'line' => $stack[$i]['line'],
           'function' => $stack[$i + 1]['function'],
-          'class' => $stack[$i + 1]['class'] ?? '',
+          'class' => $stack[$i + 1]['class'] ?? NULL,
           'type' => $stack[$i + 1]['type'] ?? NULL,
           'args' => $stack[$i + 1]['args'] ?? [],
         ];

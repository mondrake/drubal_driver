diff --git a/core/modules/views/src/Plugin/views/query/Sql.php b/core/modules/views/src/Plugin/views/query/Sql.php
index 59b9eb7e..7299a0b5 100644
--- a/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/core/modules/views/src/Plugin/views/query/Sql.php
@@ -1502,6 +1502,7 @@ public function execute(ViewExecutable $view) {
       $start = microtime(TRUE);
 
       try {
+dump([(string) $query, (string) $count_query]);
         if ($view->pager->useCountQuery() || !empty($view->get_total_rows)) {
           $view->pager->executeCountQuery($count_query);
         }
diff --git a/core/modules/views/tests/src/Kernel/Plugin/CacheTest.php b/core/modules/views/tests/src/Kernel/Plugin/CacheTest.php
index c8793bc8..015f1d99 100644
--- a/core/modules/views/tests/src/Kernel/Plugin/CacheTest.php
+++ b/core/modules/views/tests/src/Kernel/Plugin/CacheTest.php
@@ -67,7 +67,7 @@ protected function viewsData() {
    *
    * @see views_plugin_cache_time
    */
-  public function testTimeResultCaching() {
+/*  public function testTimeResultCaching() {
     $view = Views::getView('test_cache');
     $view->setDisplay();
     $view->display_handler->overrideOption('cache', [
@@ -105,7 +105,7 @@ public function testTimeResultCaching() {
    *
    * @see views_plugin_cache_time
    */
-  public function testTimeResultCachingWithFilter() {
+/*  public function testTimeResultCachingWithFilter() {
     // Check that we can find the test filter plugin.
     $plugin = $this->container->get('plugin.manager.views.filter')->createInstance('test_filter');
     $this->assertTrue($plugin instanceof FilterPlugin, 'Test filter plugin found.');
@@ -181,7 +181,7 @@ public function testTimeResultCachingWithFilter() {
   /**
    * Tests result caching with a pager.
    */
-  public function testTimeResultCachingWithPager() {
+/*  public function testTimeResultCachingWithPager() {
     $view = Views::getView('test_cache');
     $view->setDisplay();
     $view->display_handler->overrideOption('cache', [
@@ -224,7 +224,7 @@ public function testTimeResultCachingWithPager() {
    *
    * @see views_plugin_cache_time
    */
-  public function testNoneResultCaching() {
+/*  public function testNoneResultCaching() {
     // Create a basic result which just 2 results.
     $view = Views::getView('test_cache');
     $view->setDisplay();
@@ -261,7 +261,7 @@ public function testNoneResultCaching() {
   /**
    * Tests css/js storage and restoring mechanism.
    */
-  public function testHeaderStorage() {
+/*  public function testHeaderStorage() {
     // Create a view with output caching enabled.
     // Some hook_views_pre_render in views_test_data.module adds the test css/js file.
     // so they should be added to the css/js storage.
@@ -277,7 +277,7 @@ public function testHeaderStorage() {
 
     $output = $view->buildRenderable();
     /** @var \Drupal\Core\Render\RendererInterface $renderer */
-    $renderer = \Drupal::service('renderer');
+/*    $renderer = \Drupal::service('renderer');
     $renderer->executeInRenderContext(new RenderContext(), function () use (&$output, $renderer) {
       return $renderer->render($output);
     });
@@ -316,7 +316,7 @@ public function testSubqueryStringCache() {
   /**
    * Tests the data contained in cached items.
    */
-  public function testCacheData() {
+/*  public function testCacheData() {
     for ($i = 1; $i <= 5; $i++) {
       Node::create([
         'title' => $this->randomMachineName(8),
@@ -354,7 +354,7 @@ public function testCacheData() {
   /**
    * Tests the cache context integration for views result cache.
    */
-  public function testCacheContextIntegration() {
+/*  public function testCacheContextIntegration() {
     $view = Views::getView('test_cache');
     $view->setDisplay('page_2');
     \Drupal::state()->set('views_test_cache_context', 'George');
@@ -386,7 +386,7 @@ public function testCacheContextIntegration() {
   /**
    * Tests that cacheability metadata is carried over from argument defaults.
    */
-  public function testArgumentDefaultCache() {
+/*  public function testArgumentDefaultCache() {
     $view = Views::getView('test_view');
 
     // Add a new argument and set the test plugin for the argument_default.
@@ -403,10 +403,10 @@ public function testArgumentDefaultCache() {
     $output = $view->preview();
 
     /** @var \Drupal\Core\Render\RendererInterface $renderer */
-    $renderer = \Drupal::service('renderer');
+ /*   $renderer = \Drupal::service('renderer');
 
     $renderer->renderPlain($output);
     $this->assertEquals(['config:views.view.test_view', 'example_tag'], $output['#cache']['tags']);
-  }
+  }*/
 
 }

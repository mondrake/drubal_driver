diff --git a/core/modules/field/field.purge.inc b/core/modules/field/field.purge.inc
index a2b2b92..76ecf67 100644
--- a/core/modules/field/field.purge.inc
+++ b/core/modules/field/field.purge.inc
@@ -163,6 +163,8 @@ function field_purge_field_storage(FieldStorageDefinitionInterface $field_storag
   $deleted_fields_repository->removeFieldStorageDefinition($field_storage);
 
   // Notify the storage layer.
+\Drupal\Core\Database\Database::closeConnection();
+\Drupal\Core\Database\Database::getConnection();
   \Drupal::entityManager()->getStorage($field_storage->getTargetEntityTypeId())->finalizePurge($field_storage);
 
   // Invoke external hooks after the cache is cleared for API consistency.
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityBundleFieldTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityBundleFieldTest.php
index 22476d7..6e3e18b 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityBundleFieldTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityBundleFieldTest.php
@@ -107,6 +107,7 @@ public function testCustomBundleFieldUsage() {
 
     // Purge field data, and check that the storage definition has been
     // completely removed once the data is purged.
+\Drupal::database()->getDbalExtension()->setDebugging(TRUE);
     field_purge_batch(10);
     $this->assertFalse($this->database->schema()->tableExists($table), 'Custom field table was deleted');
   }

diff --git a/core/lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php b/core/lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php
index 72cf989890..7b797b9ae8 100644
--- a/core/lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php
+++ b/core/lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php
@@ -37,7 +37,7 @@ protected function doInvalidateTags(array $tags) {
       foreach ($tags as $tag) {
         $this->connection->merge('cachetags')
           ->insertFields(['invalidations' => 1])
-          ->expression('invalidations', 'invalidations + 1')
+          ->expression('invalidations', '[invalidations] + 1')
           ->key('tag', $tag)
           ->execute();
       }
diff --git a/core/lib/Drupal/Core/Entity/Query/Sql/Condition.php b/core/lib/Drupal/Core/Entity/Query/Sql/Condition.php
index 4d70b1e456..65b8d39dec 100644
--- a/core/lib/Drupal/Core/Entity/Query/Sql/Condition.php
+++ b/core/lib/Drupal/Core/Entity/Query/Sql/Condition.php
@@ -37,6 +37,7 @@ public function compile($conditionContainer) {
     // added to the $conditionContainer object to keep grouping.
     $sql_query = $conditionContainer instanceof SelectInterface ? $conditionContainer : $conditionContainer->sqlQuery;
     $tables = $this->query->getTables($sql_query);
+dump([$tables, $this->conditions]);
     foreach ($this->conditions as $condition) {
       if ($condition['field'] instanceof ConditionInterface) {
         $sql_condition = $sql_query->getConnection()->condition($condition['field']->getConjunction());
diff --git a/core/modules/system/tests/modules/database_test/database_test.module b/core/modules/system/tests/modules/database_test/database_test.module
index 210998444a..c03ef5ca3d 100644
--- a/core/modules/system/tests/modules/database_test/database_test.module
+++ b/core/modules/system/tests/modules/database_test/database_test.module
@@ -17,7 +17,7 @@ function database_test_query_alter(AlterableInterface $query) {
   }
 
   if ($query->hasTag('database_test_alter_add_join')) {
-    $people_alias = $query->join('test', 'people', "test_task.pid = %alias.id");
+    $people_alias = $query->join('test', 'people', "[test_task].[pid] = [%alias].[id]");
     $query->addField($people_alias, 'name', 'name');
     $query->condition($people_alias . '.id', 2);
   }
@@ -34,7 +34,7 @@ function database_test_query_alter(AlterableInterface $query) {
 
   if ($query->hasTag('database_test_alter_change_expressions')) {
     $expressions =& $query->getExpressions();
-    $expressions['double_age']['expression'] = 'age*3';
+    $expressions['double_age']['expression'] = '[age]*3';
   }
 }
 
diff --git a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
index 4a37ecd4b6..ef2bbcbd73 100644
--- a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
+++ b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
@@ -122,7 +122,7 @@ public function testHavingPagerQuery() {
       ->fields('t', ['name'])
       ->orderBy('name')
       ->groupBy('name')
-      ->having('MAX(age) > :count', [':count' => 26])
+      ->having('MAX([age]) > :count', [':count' => 26])
       ->limit(5);
 
     $ages = $query
diff --git a/core/tests/Drupal/KernelTests/Core/Database/AlterTest.php b/core/tests/Drupal/KernelTests/Core/Database/AlterTest.php
index 84c87b876b..d9d16f3801 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/AlterTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/AlterTest.php
@@ -56,7 +56,7 @@ public function testAlterChangeConditional() {
     $tid_field = $query->addField('test_task', 'tid');
     $pid_field = $query->addField('test_task', 'pid');
     $task_field = $query->addField('test_task', 'task');
-    $people_alias = $query->join('test', 'people', "test_task.pid = people.id");
+    $people_alias = $query->join('test', 'people', "[test_task].[pid] = [people].[id]");
     $name_field = $query->addField($people_alias, 'name', 'name');
     $query->condition('test_task.tid', '1');
     $query->orderBy($tid_field);
@@ -94,7 +94,7 @@ public function testAlterChangeFields() {
   public function testAlterExpression() {
     $query = $this->connection->select('test');
     $name_field = $query->addField('test', 'name');
-    $age_field = $query->addExpression("age*2", 'double_age');
+    $age_field = $query->addExpression("[age]*2", 'double_age');
     $query->condition('age', 27);
     $query->addTag('database_test_alter_change_expressions');
     $result = $query->execute();
@@ -133,13 +133,13 @@ public function testSimpleAlterSubquery() {
     $subquery->addField('p', 'id');
     // Pick out George.
     $subquery->condition('age', 27);
-    $subquery->addExpression("age*2", 'double_age');
+    $subquery->addExpression("[age]*2", 'double_age');
     // This query alter should change it to age * 3.
     $subquery->addTag('database_test_alter_change_expressions');
 
     // Create a main query and join to sub-query.
     $query = $this->connection->select('test_task', 'tt');
-    $query->join($subquery, 'pq', 'pq.id = tt.pid');
+    $query->join($subquery, 'pq', '[pq].[id] = [tt].[pid]');
     $age_field = $query->addField('pq', 'double_age');
     $name_field = $query->addField('pq', 'name');
 
diff --git a/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php b/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php
index 1c18d5fadf..45a2f5de0d 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php
@@ -157,7 +157,7 @@ public function testInsertSelectFields() {
     // The query builder will always append expressions after fields.
     // Add the expression first to test that the insert fields are correctly
     // re-ordered.
-    $query->addExpression('tp.age', 'age');
+    $query->addExpression('[tp].[age]', 'age');
     $query
       ->fields('tp', ['name', 'job'])
       ->condition('tp.name', 'Meredith');
diff --git a/core/tests/Drupal/KernelTests/Core/Database/LoggingTest.php b/core/tests/Drupal/KernelTests/Core/Database/LoggingTest.php
index 4716ce10e0..db3740a62b 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/LoggingTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/LoggingTest.php
@@ -24,7 +24,7 @@ public function testEnableLogging() {
     $this->connection->query('SELECT [age] FROM {test} WHERE [name] = :name', [':name' => 'Ringo'])->fetchCol();
 
     // Trigger a call that does not have file in the backtrace.
-    call_user_func_array([Database::getConnection(), 'query'], ['SELECT age FROM {test} WHERE name = :name', [':name' => 'Ringo']])->fetchCol();
+    call_user_func_array([Database::getConnection(), 'query'], ['SELECT [age] FROM {test} WHERE [name] = :name', [':name' => 'Ringo']])->fetchCol();
 
     $queries = Database::getLog('testing', 'default');
 
diff --git a/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php b/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php
index 563f59f21d..3fd1311d3e 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php
@@ -129,7 +129,7 @@ public function testMergeUpdateExpression() {
       ->key('job', 'Speaker')
       ->fields(['name' => 'Tiffany'])
       ->insertFields(['age' => 31])
-      ->expression('age', 'age + :age', [':age' => 4])
+      ->expression('age', '[age] + :age', [':age' => 4])
       ->execute();
 
     $num_records_after = $this->connection->query('SELECT COUNT(*) FROM {test_people}')->fetchField();
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
index 2ef1112a6f..817d4303fd 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
@@ -26,7 +26,7 @@ class SelectComplexTest extends DatabaseTestBase {
    */
   public function testDefaultJoin() {
     $query = $this->connection->select('test_task', 't');
-    $people_alias = $query->join('test', 'p', 't.pid = p.id');
+    $people_alias = $query->join('test', 'p', '[t].[pid] = [p].[id]');
     $name_field = $query->addField($people_alias, 'name', 'name');
     $query->addField('t', 'task', 'task');
     $priority_field = $query->addField('t', 'priority', 'priority');
@@ -52,7 +52,7 @@ public function testDefaultJoin() {
    */
   public function testLeftOuterJoin() {
     $query = $this->connection->select('test', 'p');
-    $people_alias = $query->leftJoin('test_task', 't', 't.pid = p.id');
+    $people_alias = $query->leftJoin('test_task', 't', '[t].[pid] = [p].[id]');
     $name_field = $query->addField('p', 'name', 'name');
     $query->addField($people_alias, 'task', 'task');
     $query->addField($people_alias, 'priority', 'priority');
@@ -77,7 +77,7 @@ public function testLeftOuterJoin() {
    */
   public function testGroupBy() {
     $query = $this->connection->select('test_task', 't');
-    $count_field = $query->addExpression('COUNT(task)', 'num');
+    $count_field = $query->addExpression('COUNT([task])', 'num');
     $task_field = $query->addField('t', 'task');
     $query->orderBy($count_field);
     $query->groupBy($task_field);
@@ -114,11 +114,11 @@ public function testGroupBy() {
    */
   public function testGroupByAndHaving() {
     $query = $this->connection->select('test_task', 't');
-    $count_field = $query->addExpression('COUNT(task)', 'num');
+    $count_field = $query->addExpression('COUNT([task])', 'num');
     $task_field = $query->addField('t', 'task');
     $query->orderBy($count_field);
     $query->groupBy($task_field);
-    $query->having('COUNT(task) >= 2');
+    $query->having('COUNT([task]) >= 2');
     $result = $query->execute();
 
     $num_records = 0;
@@ -212,9 +212,9 @@ public function testHavingCountQuery() {
     $query = $this->connection->select('test')
       ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
       ->groupBy('age')
-      ->having('age + 1 > 0');
+      ->having('[age] + 1 > 0');
     $query->addField('test', 'age');
-    $query->addExpression('age + 1');
+    $query->addExpression('[age] + 1');
     $count = count($query->execute()->fetchCol());
     $this->assertEqual($count, 4, 'Counted the correct number of records.');
   }
@@ -296,7 +296,7 @@ public function testCountQueryGroupBy() {
     // reason.
     $query = $this->connection->select('test_task');
     $query->addField('test_task', 'pid', 'pid_alias');
-    $query->addExpression('COUNT(test_task.task)', 'count');
+    $query->addExpression('COUNT([test_task].[task])', 'count');
     $query->groupBy('pid_alias');
     $query->orderBy('pid_alias', 'asc');
 
@@ -327,10 +327,10 @@ public function testNestedConditions() {
    */
   public function testJoinTwice() {
     $query = $this->connection->select('test')->fields('test');
-    $alias = $query->join('test', 'test', 'test.job = %alias.job');
+    $alias = $query->join('test', 'test', '[test].[job] = [%alias].[job]');
     $query->addField($alias, 'name', 'other_name');
     $query->addField($alias, 'job', 'other_job');
-    $query->where("$alias.name <> test.name");
+    $query->where("[$alias].[name] <> [test].[name]");
     $crowded_job = $query->execute()->fetch();
     $this->assertEqual($crowded_job->job, $crowded_job->other_job, 'Correctly joined same table twice.');
     $this->assertNotEqual($crowded_job->name, $crowded_job->other_name, 'Correctly joined same table twice.');
@@ -399,7 +399,7 @@ public function testSelectWithRowCount() {
   public function testJoinConditionObject() {
     // Same test as testDefaultJoin, but with a Condition object.
     $query = $this->connection->select('test_task', 't');
-    $join_cond = ($this->connection->condition('AND'))->where('t.pid = p.id');
+    $join_cond = ($this->connection->condition('AND'))->where('[t].[pid] = [p].[id]');
     $people_alias = $query->join('test', 'p', $join_cond);
     $name_field = $query->addField($people_alias, 'name', 'name');
     $query->addField('t', 'task', 'task');
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectSubqueryTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectSubqueryTest.php
index dbbc40f180..f9b0eccb5b 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectSubqueryTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectSubqueryTest.php
@@ -23,7 +23,7 @@ public function testFromSubquerySelect() {
       // Create another query that joins against the virtual table resulting
       // from the subquery.
       $select = $this->connection->select($subquery, 'tt2');
-      $select->join('test', 't', 't.id=tt2.pid');
+      $select->join('test', 't', '[t].[id]=[tt2].[pid]');
       $select->addField('t', 'name');
       if ($i) {
         // Use a different number of conditions here to confuse the subquery
@@ -57,7 +57,7 @@ public function testFromSubquerySelectWithLimit() {
     // Create another query that joins against the virtual table resulting
     // from the subquery.
     $select = $this->connection->select($subquery, 'tt2');
-    $select->join('test', 't', 't.id=tt2.pid');
+    $select->join('test', 't', '[t].[id]=[tt2].[pid]');
     $select->addField('t', 'name');
 
     // The resulting query should be equivalent to:
@@ -98,7 +98,7 @@ public function testConditionSubquerySelect() {
   public function testConditionSubquerySelect2() {
     // Create a subquery, which is just a normal query object.
     $subquery = $this->connection->select('test', 't2');
-    $subquery->addExpression('AVG(t2.age)');
+    $subquery->addExpression('AVG([t2].[age])');
 
     // Create another query that adds a clause using the subquery.
     $select = $this->connection->select('test', 't');
@@ -119,12 +119,12 @@ public function testConditionSubquerySelect2() {
   public function testConditionSubquerySelect3() {
     // Create subquery 1, which is just a normal query object.
     $subquery1 = $this->connection->select('test_task', 'tt');
-    $subquery1->addExpression('AVG(tt.priority)');
-    $subquery1->where('tt.pid = t.id');
+    $subquery1->addExpression('AVG([tt].[priority])');
+    $subquery1->where('[tt].[pid] = [t].[id]');
 
     // Create subquery 2, which is just a normal query object.
     $subquery2 = $this->connection->select('test_task', 'tt2');
-    $subquery2->addExpression('AVG(tt2.priority)');
+    $subquery2->addExpression('AVG([tt2].[priority])');
 
     // Create another query that adds a clause using the subqueries.
     $select = $this->connection->select('test', 't');
@@ -149,18 +149,18 @@ public function testConditionSubquerySelect3() {
   public function testConditionSubquerySelect4() {
     // Create subquery 1, which is just a normal query object.
     $subquery1 = $this->connection->select('test_task', 'tt');
-    $subquery1->addExpression('AVG(tt.priority)');
-    $subquery1->where('tt.pid = t.id');
+    $subquery1->addExpression('AVG([tt].[priority])');
+    $subquery1->where('[tt].[pid] = [t].[id]');
 
     // Create subquery 2, which is just a normal query object.
     $subquery2 = $this->connection->select('test_task', 'tt2');
-    $subquery2->addExpression('MIN(tt2.priority)');
-    $subquery2->where('tt2.pid <> t.id');
+    $subquery2->addExpression('MIN([tt2].[priority])');
+    $subquery2->where('[tt2].[pid] <> [t].[id]');
 
     // Create subquery 3, which is just a normal query object.
     $subquery3 = $this->connection->select('test_task', 'tt3');
-    $subquery3->addExpression('AVG(tt3.priority)');
-    $subquery3->where('tt3.pid <> t.id');
+    $subquery3->addExpression('AVG([tt3].[priority])');
+    $subquery3->where('[tt3].[pid] <> [t].[id]');
 
     // Create another query that adds a clause using the subqueries.
     $select = $this->connection->select('test', 't');
@@ -189,7 +189,7 @@ public function testJoinSubquerySelect() {
     // Create another query that joins against the virtual table resulting
     // from the subquery.
     $select = $this->connection->select('test', 't');
-    $select->join($subquery, 'tt', 't.id=tt.pid');
+    $select->join($subquery, 'tt', '[t].[id]=[tt].[pid]');
     $select->addField('t', 'name');
 
     // The resulting query should be equivalent to:
@@ -222,7 +222,7 @@ public function testExistsSubquerySelect() {
     // Subquery to {test_people}.
     $subquery = $this->connection->select('test_people', 'tp')
       ->fields('tp', ['name'])
-      ->where('tp.name = t.name');
+      ->where('[tp].[name] = [t].[name]');
     $query->exists($subquery);
     $result = $query->execute();
 
@@ -253,7 +253,7 @@ public function testNotExistsSubquerySelect() {
     // Subquery to {test_people}.
     $subquery = $this->connection->select('test_people', 'tp')
       ->fields('tp', ['name'])
-      ->where('tp.name = t.name');
+      ->where('[tp].[name] = [t].[name]');
     $query->notExists($subquery);
 
     // Ensure that we got the right number of records.
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
index 2412797875..47a84d825f 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
@@ -126,7 +126,7 @@ public function testSimpleSelectConditional() {
   public function testSimpleSelectExpression() {
     $query = $this->connection->select('test');
     $name_field = $query->addField('test', 'name');
-    $age_field = $query->addExpression("age*2", 'double_age');
+    $age_field = $query->addExpression("[age]*2", 'double_age');
     $query->condition('age', 27);
     $result = $query->execute();
 
@@ -146,8 +146,8 @@ public function testSimpleSelectExpression() {
   public function testSimpleSelectExpressionMultiple() {
     $query = $this->connection->select('test');
     $name_field = $query->addField('test', 'name');
-    $age_double_field = $query->addExpression("age*2");
-    $age_triple_field = $query->addExpression("age*3");
+    $age_double_field = $query->addExpression("[age]*2");
+    $age_triple_field = $query->addExpression("[age]*3");
     $query->condition('age', 27);
     $result = $query->execute();
 
diff --git a/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php b/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php
index 6cf7bf9235..65b8c47f63 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php
@@ -41,8 +41,8 @@ public function testRepeatedInsertStatementReuse() {
 
     $num_records_after = $this->connection->select('test')->countQuery()->execute()->fetchField();
     $this->assertEquals($num_records_before + 2, $num_records_after);
-    $this->assertSame('30', $this->connection->query('SELECT age FROM {test} WHERE name = :name', [':name' => 'Larry'])->fetchField());
-    $this->assertSame('31', $this->connection->query('SELECT age FROM {test} WHERE name = :name', [':name' => 'Curly'])->fetchField());
+    $this->assertSame('30', $this->connection->query('SELECT [age] FROM {test} WHERE [name] = :name', [':name' => 'Larry'])->fetchField());
+    $this->assertSame('31', $this->connection->query('SELECT [age] FROM {test} WHERE [name] = :name', [':name' => 'Curly'])->fetchField());
   }
 
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/UpdateComplexTest.php b/core/tests/Drupal/KernelTests/Core/Database/UpdateComplexTest.php
index 0d7b091d39..9911fea004 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/UpdateComplexTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/UpdateComplexTest.php
@@ -92,7 +92,7 @@ public function testUpdateExpression() {
     $num_updated = $this->connection->update('test')
       ->condition('name', 'Ringo')
       ->fields(['job' => 'Musician'])
-      ->expression('age', 'age + :age', [':age' => 4])
+      ->expression('age', '[age] + :age', [':age' => 4])
       ->execute();
     $this->assertIdentical($num_updated, 1, 'Updated 1 record.');
 
@@ -112,7 +112,7 @@ public function testUpdateOnlyExpression() {
     $before_age = $this->connection->query('SELECT [age] FROM {test} WHERE [name] = :name', [':name' => 'Ringo'])->fetchField();
     $num_updated = $this->connection->update('test')
       ->condition('name', 'Ringo')
-      ->expression('age', 'age + :age', [':age' => 4])
+      ->expression('age', '[age] + :age', [':age' => 4])
       ->execute();
     $this->assertIdentical($num_updated, 1, 'Updated 1 record.');
 
@@ -125,7 +125,7 @@ public function testUpdateOnlyExpression() {
    */
   public function testSubSelectUpdate() {
     $subselect = $this->connection->select('test_task', 't');
-    $subselect->addExpression('MAX(priority) + :increment', 'max_priority', [':increment' => 30]);
+    $subselect->addExpression('MAX([priority]) + :increment', 'max_priority', [':increment' => 30]);
     // Clone this to make sure we are running a different query when
     // asserting.
     $select = clone $subselect;
diff --git a/core/tests/Drupal/KernelTests/Core/Database/UpdateTest.php b/core/tests/Drupal/KernelTests/Core/Database/UpdateTest.php
index 607f61417e..f8f564d96c 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/UpdateTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/UpdateTest.php
@@ -72,7 +72,7 @@ public function testMultiGTUpdate() {
   public function testWhereUpdate() {
     $num_updated = $this->connection->update('test')
       ->fields(['job' => 'Musician'])
-      ->where('age > :age', [':age' => 26])
+      ->where('[age] > :age', [':age' => 26])
       ->execute();
     $this->assertIdentical($num_updated, 2, 'Updated 2 records.');
 
@@ -86,7 +86,7 @@ public function testWhereUpdate() {
   public function testWhereAndConditionUpdate() {
     $update = $this->connection->update('test')
       ->fields(['job' => 'Musician'])
-      ->where('age > :age', [':age' => 26])
+      ->where('[age] > :age', [':age' => 26])
       ->condition('name', 'Ringo');
     $num_updated = $update->execute();
     $this->assertIdentical($num_updated, 1, 'Updated 1 record.');
@@ -102,7 +102,7 @@ public function testExpressionUpdate() {
     // Ensure that expressions are handled properly. This should set every
     // record's age to a square of itself.
     $num_rows = $this->connection->update('test')
-      ->expression('age', 'age * age')
+      ->expression('age', '[age] * [age]')
       ->execute();
     $this->assertIdentical($num_rows, 4, 'Updated 4 records.');
 

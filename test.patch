diff --git a/core/lib/Drupal/Core/Entity/Query/Sql/ConditionAggregate.php b/core/lib/Drupal/Core/Entity/Query/Sql/ConditionAggregate.php
index d0db922895..d4163a25b9 100644
--- a/core/lib/Drupal/Core/Entity/Query/Sql/ConditionAggregate.php
+++ b/core/lib/Drupal/Core/Entity/Query/Sql/ConditionAggregate.php
@@ -38,7 +38,9 @@ public function compile($conditionContainer) {
         $condition_class::translateCondition($condition, $sql_query, $tables->isFieldCaseSensitive($condition['field']));
         $function = $condition['function'];
         $placeholder = ':db_placeholder_' . $conditionContainer->nextPlaceholder();
-        $conditionContainer->having("$function($field) {$condition['operator']} $placeholder", [$placeholder => $condition['value']]);
+//        $sql_field_escaped = '[' . str_replace('.', '].[', $field) . ']';
+        $sql_field_escaped = $field;
+        $conditionContainer->having("$function($sql_field_escaped) {$condition['operator']} $placeholder", [$placeholder => $condition['value']]);
       }
     }
   }
diff --git a/core/lib/Drupal/Core/Entity/Query/Sql/QueryAggregate.php b/core/lib/Drupal/Core/Entity/Query/Sql/QueryAggregate.php
index 0f7ae5b217..2e2d7a01c1 100644
--- a/core/lib/Drupal/Core/Entity/Query/Sql/QueryAggregate.php
+++ b/core/lib/Drupal/Core/Entity/Query/Sql/QueryAggregate.php
@@ -75,7 +75,8 @@ protected function addAggregate() {
     if ($this->aggregate) {
       foreach ($this->aggregate as $aggregate) {
         $sql_field = $this->getSqlField($aggregate['field'], $aggregate['langcode']);
-        $this->sqlExpressions[$aggregate['alias']] = $aggregate['function'] . "($sql_field)";
+        $sql_field_escaped = '[' . str_replace('.', '].[', $sql_field) . ']';
+        $this->sqlExpressions[$aggregate['alias']] = $aggregate['function'] . "($sql_field_escaped)";
       }
     }
     return $this;
diff --git a/core/modules/views/tests/src/Kernel/QueryGroupByTest.php b/core/modules/views/tests/src/Kernel/QueryGroupByTest.php
index 507c40eb5f..447b353b01 100644
--- a/core/modules/views/tests/src/Kernel/QueryGroupByTest.php
+++ b/core/modules/views/tests/src/Kernel/QueryGroupByTest.php
@@ -210,7 +210,10 @@ public function testGroupByBaseField() {
     $view->displayHandlers->get('default')->options['fields']['name']['group_type'] = 'min';
     unset($view->displayHandlers->get('default')->options['fields']['id']['group_type']);
     $this->executeView($view);
-    $this->assertStringContainsString('GROUP BY entity_test.id', (string) $view->build_info['query'], 'GROUP BY field includes the base table name when grouping on the base field.');
+    // All fields should be properly quoted.
+    $this->assertRegExp('/MIN\(.entity_test.\..name.\) AS .entity_test_name./', (string) $view->build_info['query'], 'MIN() function argument should include the base table name.');
+    $this->assertRegExp('/MIN\(.entity_test.\..id.\) AS .id_1./', (string) $view->build_info['query'], 'MIN() function argument should include the base table name.');
+    $this->assertRegExp('/GROUP BY .entity_test.\..id.\, \.entity_test_langcode\./', (string) $view->build_info['query'], 'GROUP BY field includes the base table name when grouping on the base field.');
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityQueryAggregateTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityQueryAggregateTest.php
index 02448d6cee..fe66fb830c 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityQueryAggregateTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityQueryAggregateTest.php
@@ -131,10 +131,11 @@ public function testAggregation() {
 
     // Apply a simple aggregation for different aggregation functions.
     foreach ($function_expected as $aggregation_function => $expected) {
-      $this->queryResult = $this->entityStorage->getAggregateQuery()
-        ->aggregate('id', $aggregation_function)
-        ->execute();
-      $this->assertEqual($this->queryResult, $expected);
+      $query = $this->entityStorage->getAggregateQuery()
+        ->aggregate('id', $aggregation_function);
+      $this->queryResult = $query->execute();
+      $this->assertRegExp('/' . $aggregation_function . '\(.entity_test.\..id.\) AS .id_' . $aggregation_function . './', (string) $query, 'The argument to the aggregation function should be a quoted field.');
+      $this->assertEquals($expected, $this->queryResult);
     }
 
     // Apply aggregation and groupby on the same query.
@@ -149,11 +150,12 @@ public function testAggregation() {
     ]);
 
     // Apply aggregation and a condition which matches.
-    $this->queryResult = $this->entityStorage->getAggregateQuery()
+    $query = $this->entityStorage->getAggregateQuery()
       ->aggregate('id', 'COUNT')
       ->groupBy('id')
-      ->conditionAggregate('id', 'COUNT', 8)
-      ->execute();
+      ->conditionAggregate('id', 'COUNT', 8);
+    $this->assertEquals('bingo', (string) $query);
+    $this->queryResult = $query->execute();
     $this->assertResults([]);
 
     // Don't call aggregate to test the implicit aggregate call.
